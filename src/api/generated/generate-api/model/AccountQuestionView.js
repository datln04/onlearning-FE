/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GrantedAuthorityQuestionView from './GrantedAuthorityQuestionView';

/**
 * The AccountQuestionView model module.
 * @module model/AccountQuestionView
 * @version v1
 */
class AccountQuestionView {
    /**
     * Constructs a new <code>AccountQuestionView</code>.
     * @alias module:model/AccountQuestionView
     */
    constructor() { 
        
        AccountQuestionView.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountQuestionView</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountQuestionView} obj Optional instance to populate.
     * @return {module:model/AccountQuestionView} The populated <code>AccountQuestionView</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountQuestionView();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('deletedAt')) {
                obj['deletedAt'] = ApiClient.convertToType(data['deletedAt'], 'Date');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('accountNonExpired')) {
                obj['accountNonExpired'] = ApiClient.convertToType(data['accountNonExpired'], 'Boolean');
            }
            if (data.hasOwnProperty('credentialsNonExpired')) {
                obj['credentialsNonExpired'] = ApiClient.convertToType(data['credentialsNonExpired'], 'Boolean');
            }
            if (data.hasOwnProperty('accountNonLocked')) {
                obj['accountNonLocked'] = ApiClient.convertToType(data['accountNonLocked'], 'Boolean');
            }
            if (data.hasOwnProperty('authorities')) {
                obj['authorities'] = ApiClient.convertToType(data['authorities'], [GrantedAuthorityQuestionView]);
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountQuestionView</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountQuestionView</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        if (data['authorities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authorities'])) {
                throw new Error("Expected the field `authorities` to be an array in the JSON data but got " + data['authorities']);
            }
            // validate the optional field `authorities` (array)
            for (const item of data['authorities']) {
                GrantedAuthorityQuestionView.validateJsonObject(item);
            };
        }

        return true;
    }


}



/**
 * @member {Date} createdAt
 */
AccountQuestionView.prototype['createdAt'] = undefined;

/**
 * @member {Date} updatedAt
 */
AccountQuestionView.prototype['updatedAt'] = undefined;

/**
 * @member {Date} deletedAt
 */
AccountQuestionView.prototype['deletedAt'] = undefined;

/**
 * @member {String} password
 */
AccountQuestionView.prototype['password'] = undefined;

/**
 * @member {module:model/AccountQuestionView.RoleEnum} role
 */
AccountQuestionView.prototype['role'] = undefined;

/**
 * @member {Boolean} active
 */
AccountQuestionView.prototype['active'] = undefined;

/**
 * @member {Boolean} accountNonExpired
 */
AccountQuestionView.prototype['accountNonExpired'] = undefined;

/**
 * @member {Boolean} credentialsNonExpired
 */
AccountQuestionView.prototype['credentialsNonExpired'] = undefined;

/**
 * @member {Boolean} accountNonLocked
 */
AccountQuestionView.prototype['accountNonLocked'] = undefined;

/**
 * @member {Array.<module:model/GrantedAuthorityQuestionView>} authorities
 */
AccountQuestionView.prototype['authorities'] = undefined;

/**
 * @member {Boolean} enabled
 */
AccountQuestionView.prototype['enabled'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
AccountQuestionView['RoleEnum'] = {

    /**
     * value: "ADMIN"
     * @const
     */
    "ADMIN": "ADMIN",

    /**
     * value: "STAFF"
     * @const
     */
    "STAFF": "STAFF",

    /**
     * value: "STUDENT"
     * @const
     */
    "STUDENT": "STUDENT",

    /**
     * value: "TEACHER"
     * @const
     */
    "TEACHER": "TEACHER"
};



export default AccountQuestionView;

