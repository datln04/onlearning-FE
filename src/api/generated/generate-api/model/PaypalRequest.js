/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Payer from './Payer';
import PurchaseUnit from './PurchaseUnit';

/**
 * The PaypalRequest model module.
 * @module model/PaypalRequest
 * @version v1
 */
class PaypalRequest {
    /**
     * Constructs a new <code>PaypalRequest</code>.
     * @alias module:model/PaypalRequest
     */
    constructor() { 
        
        PaypalRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaypalRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaypalRequest} obj Optional instance to populate.
     * @return {module:model/PaypalRequest} The populated <code>PaypalRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaypalRequest();

            if (data.hasOwnProperty('intent')) {
                obj['intent'] = ApiClient.convertToType(data['intent'], 'String');
            }
            if (data.hasOwnProperty('purchase_units')) {
                obj['purchase_units'] = ApiClient.convertToType(data['purchase_units'], [PurchaseUnit]);
            }
            if (data.hasOwnProperty('payer')) {
                obj['payer'] = Payer.constructFromObject(data['payer']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaypalRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaypalRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['intent'] && !(typeof data['intent'] === 'string' || data['intent'] instanceof String)) {
            throw new Error("Expected the field `intent` to be a primitive type in the JSON string but got " + data['intent']);
        }
        if (data['purchase_units']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['purchase_units'])) {
                throw new Error("Expected the field `purchase_units` to be an array in the JSON data but got " + data['purchase_units']);
            }
            // validate the optional field `purchase_units` (array)
            for (const item of data['purchase_units']) {
                PurchaseUnit.validateJsonObject(item);
            };
        }
        // validate the optional field `payer`
        if (data['payer']) { // data not null
          Payer.validateJSON(data['payer']);
        }

        return true;
    }


}



/**
 * @member {String} intent
 */
PaypalRequest.prototype['intent'] = undefined;

/**
 * @member {Array.<module:model/PurchaseUnit>} purchase_units
 */
PaypalRequest.prototype['purchase_units'] = undefined;

/**
 * @member {module:model/Payer} payer
 */
PaypalRequest.prototype['payer'] = undefined;






export default PaypalRequest;

