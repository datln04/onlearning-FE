/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnswerQuestionView from './AnswerQuestionView';
import CourseQuestionView from './CourseQuestionView';
import LessonQuestionView from './LessonQuestionView';
import TeacherQuestionView from './TeacherQuestionView';

/**
 * The QuestionQuestionView model module.
 * @module model/QuestionQuestionView
 * @version v1
 */
class QuestionQuestionView {
    /**
     * Constructs a new <code>QuestionQuestionView</code>.
     * @alias module:model/QuestionQuestionView
     */
    constructor() { 
        
        QuestionQuestionView.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QuestionQuestionView</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuestionQuestionView} obj Optional instance to populate.
     * @return {module:model/QuestionQuestionView} The populated <code>QuestionQuestionView</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuestionQuestionView();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('answers')) {
                obj['answers'] = ApiClient.convertToType(data['answers'], [AnswerQuestionView]);
            }
            if (data.hasOwnProperty('teacher')) {
                obj['teacher'] = TeacherQuestionView.constructFromObject(data['teacher']);
            }
            if (data.hasOwnProperty('course')) {
                obj['course'] = CourseQuestionView.constructFromObject(data['course']);
            }
            if (data.hasOwnProperty('lesson')) {
                obj['lesson'] = LessonQuestionView.constructFromObject(data['lesson']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuestionQuestionView</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuestionQuestionView</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        if (data['answers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['answers'])) {
                throw new Error("Expected the field `answers` to be an array in the JSON data but got " + data['answers']);
            }
            // validate the optional field `answers` (array)
            for (const item of data['answers']) {
                AnswerQuestionView.validateJsonObject(item);
            };
        }
        // validate the optional field `teacher`
        if (data['teacher']) { // data not null
          TeacherQuestionView.validateJSON(data['teacher']);
        }
        // validate the optional field `course`
        if (data['course']) { // data not null
          CourseQuestionView.validateJSON(data['course']);
        }
        // validate the optional field `lesson`
        if (data['lesson']) { // data not null
          LessonQuestionView.validateJSON(data['lesson']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
QuestionQuestionView.prototype['id'] = undefined;

/**
 * @member {String} content
 */
QuestionQuestionView.prototype['content'] = undefined;

/**
 * @member {Array.<module:model/AnswerQuestionView>} answers
 */
QuestionQuestionView.prototype['answers'] = undefined;

/**
 * @member {module:model/TeacherQuestionView} teacher
 */
QuestionQuestionView.prototype['teacher'] = undefined;

/**
 * @member {module:model/CourseQuestionView} course
 */
QuestionQuestionView.prototype['course'] = undefined;

/**
 * @member {module:model/LessonQuestionView} lesson
 */
QuestionQuestionView.prototype['lesson'] = undefined;






export default QuestionQuestionView;

