/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Name from './Name';

/**
 * The Payer model module.
 * @module model/Payer
 * @version v1
 */
class Payer {
    /**
     * Constructs a new <code>Payer</code>.
     * @alias module:model/Payer
     */
    constructor() { 
        
        Payer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Payer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Payer} obj Optional instance to populate.
     * @return {module:model/Payer} The populated <code>Payer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Payer();

            if (data.hasOwnProperty('name')) {
                obj['name'] = Name.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('email_address')) {
                obj['email_address'] = ApiClient.convertToType(data['email_address'], 'String');
            }
            if (data.hasOwnProperty('payer_id')) {
                obj['payer_id'] = ApiClient.convertToType(data['payer_id'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Payer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Payer</code>.
     */
    static validateJSON(data) {
        // validate the optional field `name`
        if (data['name']) { // data not null
          Name.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['email_address'] && !(typeof data['email_address'] === 'string' || data['email_address'] instanceof String)) {
            throw new Error("Expected the field `email_address` to be a primitive type in the JSON string but got " + data['email_address']);
        }
        // ensure the json data is a string
        if (data['payer_id'] && !(typeof data['payer_id'] === 'string' || data['payer_id'] instanceof String)) {
            throw new Error("Expected the field `payer_id` to be a primitive type in the JSON string but got " + data['payer_id']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }

        return true;
    }


}



/**
 * @member {module:model/Name} name
 */
Payer.prototype['name'] = undefined;

/**
 * @member {String} email_address
 */
Payer.prototype['email_address'] = undefined;

/**
 * @member {String} payer_id
 */
Payer.prototype['payer_id'] = undefined;

/**
 * @member {module:model/Address} address
 */
Payer.prototype['address'] = undefined;






export default Payer;

