/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UsedQuestionRequestViewUsedQuestion model module.
 * @module model/UsedQuestionRequestViewUsedQuestion
 * @version v1
 */
class UsedQuestionRequestViewUsedQuestion {
    /**
     * Constructs a new <code>UsedQuestionRequestViewUsedQuestion</code>.
     * @alias module:model/UsedQuestionRequestViewUsedQuestion
     */
    constructor() { 
        
        UsedQuestionRequestViewUsedQuestion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UsedQuestionRequestViewUsedQuestion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UsedQuestionRequestViewUsedQuestion} obj Optional instance to populate.
     * @return {module:model/UsedQuestionRequestViewUsedQuestion} The populated <code>UsedQuestionRequestViewUsedQuestion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UsedQuestionRequestViewUsedQuestion();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Boolean');
            }
            if (data.hasOwnProperty('quizId')) {
                obj['quizId'] = ApiClient.convertToType(data['quizId'], 'Number');
            }
            if (data.hasOwnProperty('usedAnswers')) {
                obj['usedAnswers'] = ApiClient.convertToType(data['usedAnswers'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UsedQuestionRequestViewUsedQuestion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UsedQuestionRequestViewUsedQuestion</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['usedAnswers'])) {
            throw new Error("Expected the field `usedAnswers` to be an array in the JSON data but got " + data['usedAnswers']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
UsedQuestionRequestViewUsedQuestion.prototype['id'] = undefined;

/**
 * @member {String} content
 */
UsedQuestionRequestViewUsedQuestion.prototype['content'] = undefined;

/**
 * @member {Boolean} status
 */
UsedQuestionRequestViewUsedQuestion.prototype['status'] = undefined;

/**
 * @member {Number} quizId
 */
UsedQuestionRequestViewUsedQuestion.prototype['quizId'] = undefined;

/**
 * @member {Array.<Number>} usedAnswers
 */
UsedQuestionRequestViewUsedQuestion.prototype['usedAnswers'] = undefined;






export default UsedQuestionRequestViewUsedQuestion;

