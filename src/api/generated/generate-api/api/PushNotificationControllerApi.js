/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchResponse from '../model/BatchResponse';
import PnsRequest from '../model/PnsRequest';

/**
* PushNotificationController service.
* @module api/PushNotificationControllerApi
* @version v1
*/
export default class PushNotificationControllerApi {

    /**
    * Constructs a new PushNotificationControllerApi. 
    * @alias module:api/PushNotificationControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the receiveNotification operation.
     * @callback module:api/PushNotificationControllerApi~receiveNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, {String: Object}>} requestBody 
     * @param {module:api/PushNotificationControllerApi~receiveNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    receiveNotification(requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling receiveNotification");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/notification/receive-notification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendSampleNotification operation.
     * @callback module:api/PushNotificationControllerApi~sendSampleNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PnsRequest} pnsRequest 
     * @param {module:api/PushNotificationControllerApi~sendSampleNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchResponse}
     */
    sendSampleNotification(pnsRequest, callback) {
      let postBody = pnsRequest;
      // verify the required parameter 'pnsRequest' is set
      if (pnsRequest === undefined || pnsRequest === null) {
        throw new Error("Missing the required parameter 'pnsRequest' when calling sendSampleNotification");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = BatchResponse;
      return this.apiClient.callApi(
        '/api/v1/notification/send-notification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
