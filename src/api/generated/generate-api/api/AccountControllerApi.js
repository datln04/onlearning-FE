/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import ChangePasswordRequest from '../model/ChangePasswordRequest';
import CreateAccountRequest from '../model/CreateAccountRequest';
import ResponseDTOAccount from '../model/ResponseDTOAccount';
import ResponseDTOString from '../model/ResponseDTOString';

/**
* AccountController service.
* @module api/AccountControllerApi
* @version v1
*/
export default class AccountControllerApi {

    /**
    * Constructs a new AccountControllerApi. 
    * @alias module:api/AccountControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback module:api/AccountControllerApi~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseDTOAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ChangePasswordRequest} changePasswordRequest 
     * @param {module:api/AccountControllerApi~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseDTOAccount}
     */
    changePassword(changePasswordRequest, callback) {
      let postBody = changePasswordRequest;
      // verify the required parameter 'changePasswordRequest' is set
      if (changePasswordRequest === undefined || changePasswordRequest === null) {
        throw new Error("Missing the required parameter 'changePasswordRequest' when calling changePassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResponseDTOAccount;
      return this.apiClient.callApi(
        '/api/v1/account/change-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTeacherAccount operation.
     * @callback module:api/AccountControllerApi~createTeacherAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseDTOAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateAccountRequest} createAccountRequest 
     * @param {module:api/AccountControllerApi~createTeacherAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseDTOAccount}
     */
    createTeacherAccount(createAccountRequest, callback) {
      let postBody = createAccountRequest;
      // verify the required parameter 'createAccountRequest' is set
      if (createAccountRequest === undefined || createAccountRequest === null) {
        throw new Error("Missing the required parameter 'createAccountRequest' when calling createTeacherAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResponseDTOAccount;
      return this.apiClient.callApi(
        '/api/v1/account/teacher-account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableAccount operation.
     * @callback module:api/AccountControllerApi~disableAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseDTOString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} accountId 
     * @param {module:api/AccountControllerApi~disableAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseDTOString}
     */
    disableAccount(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling disableAccount");
      }

      let pathParams = {
      };
      let queryParams = {
        'account_id': accountId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ResponseDTOString;
      return this.apiClient.callApi(
        '/api/v1/account/disable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableAccount operation.
     * @callback module:api/AccountControllerApi~enableAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseDTOString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} accountId 
     * @param {module:api/AccountControllerApi~enableAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseDTOString}
     */
    enableAccount(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling enableAccount");
      }

      let pathParams = {
      };
      let queryParams = {
        'account_id': accountId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ResponseDTOString;
      return this.apiClient.callApi(
        '/api/v1/account/enable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountByRoleId1 operation.
     * @callback module:api/AccountControllerApi~getAccountByRoleId1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/String} roleId 
     * @param {module:api/AccountControllerApi~getAccountByRoleId1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    getAccountByRoleId1(roleId, callback) {
      let postBody = null;
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling getAccountByRoleId1");
      }

      let pathParams = {
      };
      let queryParams = {
        'role_id': roleId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Account];
      return this.apiClient.callApi(
        '/api/v1/account/byRoleId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccounts operation.
     * @callback module:api/AccountControllerApi~getAccountsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AccountControllerApi~getAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    getAccounts(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Account];
      return this.apiClient.callApi(
        '/api/v1/account/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
