/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrderRequest from '../model/CreateOrderRequest';

/**
* PaypalController service.
* @module api/PaypalControllerApi
* @version v1
*/
export default class PaypalControllerApi {

    /**
    * Constructs a new PaypalControllerApi. 
    * @alias module:api/PaypalControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createOrder operation.
     * @callback module:api/PaypalControllerApi~createOrderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateOrderRequest} createOrderRequest 
     * @param {module:api/PaypalControllerApi~createOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createOrder(createOrderRequest, callback) {
      let postBody = createOrderRequest;
      // verify the required parameter 'createOrderRequest' is set
      if (createOrderRequest === undefined || createOrderRequest === null) {
        throw new Error("Missing the required parameter 'createOrderRequest' when calling createOrder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/paypal/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReviewPayment operation.
     * @callback module:api/PaypalControllerApi~getReviewPaymentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} paymentId 
     * @param {String} payerID 
     * @param {module:api/PaypalControllerApi~getReviewPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getReviewPayment(paymentId, payerID, callback) {
      let postBody = null;
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling getReviewPayment");
      }
      // verify the required parameter 'payerID' is set
      if (payerID === undefined || payerID === null) {
        throw new Error("Missing the required parameter 'payerID' when calling getReviewPayment");
      }

      let pathParams = {
      };
      let queryParams = {
        'paymentId': paymentId,
        'PayerID': payerID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/paypal/review', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
