/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UsedAnswer from '../model/UsedAnswer';
import UsedAnswerRequest from '../model/UsedAnswerRequest';

/**
* UsedAnswerController service.
* @module api/UsedAnswerControllerApi
* @version v1
*/
export default class UsedAnswerControllerApi {

    /**
    * Constructs a new UsedAnswerControllerApi. 
    * @alias module:api/UsedAnswerControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getByUsedQuestionId operation.
     * @callback module:api/UsedAnswerControllerApi~getByUsedQuestionIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UsedAnswer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} usedQuestionId 
     * @param {module:api/UsedAnswerControllerApi~getByUsedQuestionIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UsedAnswer>}
     */
    getByUsedQuestionId(usedQuestionId, callback) {
      let postBody = null;
      // verify the required parameter 'usedQuestionId' is set
      if (usedQuestionId === undefined || usedQuestionId === null) {
        throw new Error("Missing the required parameter 'usedQuestionId' when calling getByUsedQuestionId");
      }

      let pathParams = {
      };
      let queryParams = {
        'used_question_id': usedQuestionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UsedAnswer];
      return this.apiClient.callApi(
        '/api/v1/used-answer/by-used-question', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveUsedAnswer operation.
     * @callback module:api/UsedAnswerControllerApi~saveUsedAnswerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsedAnswer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UsedAnswerRequest} usedAnswerRequest 
     * @param {module:api/UsedAnswerControllerApi~saveUsedAnswerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsedAnswer}
     */
    saveUsedAnswer(usedAnswerRequest, callback) {
      let postBody = usedAnswerRequest;
      // verify the required parameter 'usedAnswerRequest' is set
      if (usedAnswerRequest === undefined || usedAnswerRequest === null) {
        throw new Error("Missing the required parameter 'usedAnswerRequest' when calling saveUsedAnswer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UsedAnswer;
      return this.apiClient.callApi(
        '/api/v1/used-answer/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveUsedAnswer1 operation.
     * @callback module:api/UsedAnswerControllerApi~saveUsedAnswer1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UsedAnswer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Array.<module:model/UsedAnswerRequest>} usedAnswerRequest 
     * @param {module:api/UsedAnswerControllerApi~saveUsedAnswer1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UsedAnswer>}
     */
    saveUsedAnswer1(usedAnswerRequest, callback) {
      let postBody = usedAnswerRequest;
      // verify the required parameter 'usedAnswerRequest' is set
      if (usedAnswerRequest === undefined || usedAnswerRequest === null) {
        throw new Error("Missing the required parameter 'usedAnswerRequest' when calling saveUsedAnswer1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = [UsedAnswer];
      return this.apiClient.callApi(
        '/api/v1/used-answer/saveAll', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
