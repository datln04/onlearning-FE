/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DoFeedbackRequestFeedbackView from '../model/DoFeedbackRequestFeedbackView';
import FeedContent from '../model/FeedContent';
import FeedbackFeedbackView from '../model/FeedbackFeedbackView';
import ResponseDTOFeedbackFeedbackView from '../model/ResponseDTOFeedbackFeedbackView';
import ResponseDTOLong from '../model/ResponseDTOLong';

/**
* FeedbackController service.
* @module api/FeedbackControllerApi
* @version v1
*/
export default class FeedbackControllerApi {

    /**
    * Constructs a new FeedbackControllerApi. 
    * @alias module:api/FeedbackControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the doFeedback operation.
     * @callback module:api/FeedbackControllerApi~doFeedbackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseDTOFeedbackFeedbackView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DoFeedbackRequestFeedbackView} doFeedbackRequestFeedbackView 
     * @param {module:api/FeedbackControllerApi~doFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseDTOFeedbackFeedbackView}
     */
    doFeedback(doFeedbackRequestFeedbackView, callback) {
      let postBody = doFeedbackRequestFeedbackView;
      // verify the required parameter 'doFeedbackRequestFeedbackView' is set
      if (doFeedbackRequestFeedbackView === undefined || doFeedbackRequestFeedbackView === null) {
        throw new Error("Missing the required parameter 'doFeedbackRequestFeedbackView' when calling doFeedback");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResponseDTOFeedbackFeedbackView;
      return this.apiClient.callApi(
        '/api/v1/feedback/do-feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllByCourseId operation.
     * @callback module:api/FeedbackControllerApi~findAllByCourseIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FeedbackFeedbackView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} courseId 
     * @param {module:api/FeedbackControllerApi~findAllByCourseIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FeedbackFeedbackView>}
     */
    findAllByCourseId(courseId, callback) {
      let postBody = null;
      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling findAllByCourseId");
      }

      let pathParams = {
      };
      let queryParams = {
        'course_id': courseId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [FeedbackFeedbackView];
      return this.apiClient.callApi(
        '/api/v1/feedback/ByCourse', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllFeedByStudentAndCourse operation.
     * @callback module:api/FeedbackControllerApi~getAllFeedByStudentAndCourseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FeedbackFeedbackView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} courseId 
     * @param {module:api/FeedbackControllerApi~getAllFeedByStudentAndCourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FeedbackFeedbackView>}
     */
    getAllFeedByStudentAndCourse(courseId, callback) {
      let postBody = null;
      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling getAllFeedByStudentAndCourse");
      }

      let pathParams = {
      };
      let queryParams = {
        'courseId': courseId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [FeedbackFeedbackView];
      return this.apiClient.callApi(
        '/api/v1/feedback/by-course-student', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllFeedByStudentId operation.
     * @callback module:api/FeedbackControllerApi~getAllFeedByStudentIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FeedbackFeedbackView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} studentId 
     * @param {module:api/FeedbackControllerApi~getAllFeedByStudentIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FeedbackFeedbackView>}
     */
    getAllFeedByStudentId(studentId, callback) {
      let postBody = null;
      // verify the required parameter 'studentId' is set
      if (studentId === undefined || studentId === null) {
        throw new Error("Missing the required parameter 'studentId' when calling getAllFeedByStudentId");
      }

      let pathParams = {
      };
      let queryParams = {
        'studentId': studentId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [FeedbackFeedbackView];
      return this.apiClient.callApi(
        '/api/v1/feedback/feedbacks-by-student', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllFeedContent operation.
     * @callback module:api/FeedbackControllerApi~getAllFeedContentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FeedContent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/FeedbackControllerApi~getAllFeedContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FeedContent>}
     */
    getAllFeedContent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [FeedContent];
      return this.apiClient.callApi(
        '/api/v1/feedback/feed-contents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllFeedbacks operation.
     * @callback module:api/FeedbackControllerApi~getAllFeedbacksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FeedbackFeedbackView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/FeedbackControllerApi~getAllFeedbacksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FeedbackFeedbackView>}
     */
    getAllFeedbacks(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [FeedbackFeedbackView];
      return this.apiClient.callApi(
        '/api/v1/feedback/feedbacks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRatingByTeacher operation.
     * @callback module:api/FeedbackControllerApi~getRatingByTeacherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseDTOLong} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} teacherId 
     * @param {module:api/FeedbackControllerApi~getRatingByTeacherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseDTOLong}
     */
    getRatingByTeacher(teacherId, callback) {
      let postBody = null;
      // verify the required parameter 'teacherId' is set
      if (teacherId === undefined || teacherId === null) {
        throw new Error("Missing the required parameter 'teacherId' when calling getRatingByTeacher");
      }

      let pathParams = {
      };
      let queryParams = {
        'teacher_id': teacherId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ResponseDTOLong;
      return this.apiClient.callApi(
        '/api/v1/feedback/rating-by-teacher', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveFeedContent operation.
     * @callback module:api/FeedbackControllerApi~saveFeedContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeedContent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/FeedContent} feedContent 
     * @param {module:api/FeedbackControllerApi~saveFeedContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeedContent}
     */
    saveFeedContent(feedContent, callback) {
      let postBody = feedContent;
      // verify the required parameter 'feedContent' is set
      if (feedContent === undefined || feedContent === null) {
        throw new Error("Missing the required parameter 'feedContent' when calling saveFeedContent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = FeedContent;
      return this.apiClient.callApi(
        '/api/v1/feedback/save-feed-content', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
