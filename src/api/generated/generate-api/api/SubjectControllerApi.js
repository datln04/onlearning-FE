/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ResponseDTOSubjectSubjectView from '../model/ResponseDTOSubjectSubjectView';
import SubjectRequestSubjectView from '../model/SubjectRequestSubjectView';
import SubjectSubjectView from '../model/SubjectSubjectView';
import UpdateSubjectStatusSubjectView from '../model/UpdateSubjectStatusSubjectView';

/**
* SubjectController service.
* @module api/SubjectControllerApi
* @version v1
*/
export default class SubjectControllerApi {

    /**
    * Constructs a new SubjectControllerApi. 
    * @alias module:api/SubjectControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the disableSubject operation.
     * @callback module:api/SubjectControllerApi~disableSubjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseDTOSubjectSubjectView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UpdateSubjectStatusSubjectView} updateSubjectStatusSubjectView 
     * @param {module:api/SubjectControllerApi~disableSubjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseDTOSubjectSubjectView}
     */
    disableSubject(updateSubjectStatusSubjectView, callback) {
      let postBody = updateSubjectStatusSubjectView;
      // verify the required parameter 'updateSubjectStatusSubjectView' is set
      if (updateSubjectStatusSubjectView === undefined || updateSubjectStatusSubjectView === null) {
        throw new Error("Missing the required parameter 'updateSubjectStatusSubjectView' when calling disableSubject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResponseDTOSubjectSubjectView;
      return this.apiClient.callApi(
        '/api/v1/subject/update-status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllSubject operation.
     * @callback module:api/SubjectControllerApi~findAllSubjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubjectSubjectView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SubjectControllerApi~findAllSubjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubjectSubjectView>}
     */
    findAllSubject(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SubjectSubjectView];
      return this.apiClient.callApi(
        '/api/v1/subject/subjects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllSubjectByName operation.
     * @callback module:api/SubjectControllerApi~findAllSubjectByNameCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubjectSubjectView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} name 
     * @param {module:api/SubjectControllerApi~findAllSubjectByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubjectSubjectView>}
     */
    findAllSubjectByName(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling findAllSubjectByName");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SubjectSubjectView];
      return this.apiClient.callApi(
        '/api/v1/subject/byName', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findSubjectById operation.
     * @callback module:api/SubjectControllerApi~findSubjectByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubjectSubjectView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} subjectId 
     * @param {module:api/SubjectControllerApi~findSubjectByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubjectSubjectView}
     */
    findSubjectById(subjectId, callback) {
      let postBody = null;
      // verify the required parameter 'subjectId' is set
      if (subjectId === undefined || subjectId === null) {
        throw new Error("Missing the required parameter 'subjectId' when calling findSubjectById");
      }

      let pathParams = {
      };
      let queryParams = {
        'subject-id': subjectId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SubjectSubjectView;
      return this.apiClient.callApi(
        '/api/v1/subject/byId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveSubject operation.
     * @callback module:api/SubjectControllerApi~saveSubjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubjectSubjectView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SubjectRequestSubjectView} subjectRequestSubjectView 
     * @param {module:api/SubjectControllerApi~saveSubjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubjectSubjectView}
     */
    saveSubject(subjectRequestSubjectView, callback) {
      let postBody = subjectRequestSubjectView;
      // verify the required parameter 'subjectRequestSubjectView' is set
      if (subjectRequestSubjectView === undefined || subjectRequestSubjectView === null) {
        throw new Error("Missing the required parameter 'subjectRequestSubjectView' when calling saveSubject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SubjectSubjectView;
      return this.apiClient.callApi(
        '/api/v1/subject/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
