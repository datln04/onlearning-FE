/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrderRequest from '../model/CreateOrderRequest';
import OrderResponse from '../model/OrderResponse';
import PayoutRequestWithdrawRequestView from '../model/PayoutRequestWithdrawRequestView';
import ResponseDTOOrderResponse from '../model/ResponseDTOOrderResponse';
import ResponseDTOPaymentHistoryWithdrawRequestView from '../model/ResponseDTOPaymentHistoryWithdrawRequestView';

/**
* PaypalV2Controller service.
* @module api/PaypalV2ControllerApi
* @version v1
*/
export default class PaypalV2ControllerApi {

    /**
    * Constructs a new PaypalV2ControllerApi. 
    * @alias module:api/PaypalV2ControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelOrder operation.
     * @callback module:api/PaypalV2ControllerApi~cancelOrderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} token 
     * @param {module:api/PaypalV2ControllerApi~cancelOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancelOrder(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling cancelOrder");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/paypal/cancel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmOrder operation.
     * @callback module:api/PaypalV2ControllerApi~confirmOrderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} token 
     * @param {module:api/PaypalV2ControllerApi~confirmOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    confirmOrder(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling confirmOrder");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/paypal/confirm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrders operation.
     * @callback module:api/PaypalV2ControllerApi~createOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseDTOOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateOrderRequest} createOrderRequest 
     * @param {module:api/PaypalV2ControllerApi~createOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseDTOOrderResponse}
     */
    createOrders(createOrderRequest, callback) {
      let postBody = createOrderRequest;
      // verify the required parameter 'createOrderRequest' is set
      if (createOrderRequest === undefined || createOrderRequest === null) {
        throw new Error("Missing the required parameter 'createOrderRequest' when calling createOrders");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResponseDTOOrderResponse;
      return this.apiClient.callApi(
        '/api/v1/paypal/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCaptureOrder operation.
     * @callback module:api/PaypalV2ControllerApi~getCaptureOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} token 
     * @param {String} payerID 
     * @param {module:api/PaypalV2ControllerApi~getCaptureOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderResponse}
     */
    getCaptureOrder(token, payerID, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCaptureOrder");
      }
      // verify the required parameter 'payerID' is set
      if (payerID === undefined || payerID === null) {
        throw new Error("Missing the required parameter 'payerID' when calling getCaptureOrder");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'PayerID': payerID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = OrderResponse;
      return this.apiClient.callApi(
        '/api/v1/paypal/capture', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the payoutWithdraw operation.
     * @callback module:api/PaypalV2ControllerApi~payoutWithdrawCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseDTOPaymentHistoryWithdrawRequestView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PayoutRequestWithdrawRequestView} payoutRequestWithdrawRequestView 
     * @param {module:api/PaypalV2ControllerApi~payoutWithdrawCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseDTOPaymentHistoryWithdrawRequestView}
     */
    payoutWithdraw(payoutRequestWithdrawRequestView, callback) {
      let postBody = payoutRequestWithdrawRequestView;
      // verify the required parameter 'payoutRequestWithdrawRequestView' is set
      if (payoutRequestWithdrawRequestView === undefined || payoutRequestWithdrawRequestView === null) {
        throw new Error("Missing the required parameter 'payoutRequestWithdrawRequestView' when calling payoutWithdraw");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResponseDTOPaymentHistoryWithdrawRequestView;
      return this.apiClient.callApi(
        '/api/v1/paypal/payout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
