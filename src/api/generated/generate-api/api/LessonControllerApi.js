/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LessonLessonView from '../model/LessonLessonView';
import LessonRequestLessonView from '../model/LessonRequestLessonView';

/**
* LessonController service.
* @module api/LessonControllerApi
* @version v1
*/
export default class LessonControllerApi {

    /**
    * Constructs a new LessonControllerApi. 
    * @alias module:api/LessonControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the findLessonByCourseId operation.
     * @callback module:api/LessonControllerApi~findLessonByCourseIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LessonLessonView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} courseId 
     * @param {module:api/LessonControllerApi~findLessonByCourseIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LessonLessonView>}
     */
    findLessonByCourseId(courseId, callback) {
      let postBody = null;
      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling findLessonByCourseId");
      }

      let pathParams = {
      };
      let queryParams = {
        'course_id': courseId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [LessonLessonView];
      return this.apiClient.callApi(
        '/api/v1/lesson/byCourseId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findLessonBySyllabusId operation.
     * @callback module:api/LessonControllerApi~findLessonBySyllabusIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LessonLessonView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} syllabusId 
     * @param {module:api/LessonControllerApi~findLessonBySyllabusIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LessonLessonView>}
     */
    findLessonBySyllabusId(syllabusId, callback) {
      let postBody = null;
      // verify the required parameter 'syllabusId' is set
      if (syllabusId === undefined || syllabusId === null) {
        throw new Error("Missing the required parameter 'syllabusId' when calling findLessonBySyllabusId");
      }

      let pathParams = {
      };
      let queryParams = {
        'syllabus_id': syllabusId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [LessonLessonView];
      return this.apiClient.callApi(
        '/api/v1/lesson/by-syllabus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllLesson operation.
     * @callback module:api/LessonControllerApi~getAllLessonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LessonLessonView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/LessonControllerApi~getAllLessonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LessonLessonView>}
     */
    getAllLesson(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [LessonLessonView];
      return this.apiClient.callApi(
        '/api/v1/lesson/lessons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLessonById operation.
     * @callback module:api/LessonControllerApi~getLessonByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LessonLessonView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/LessonControllerApi~getLessonByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LessonLessonView}
     */
    getLessonById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLessonById");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = LessonLessonView;
      return this.apiClient.callApi(
        '/api/v1/lesson/byId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveLesson operation.
     * @callback module:api/LessonControllerApi~saveLessonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LessonLessonView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/LessonRequestLessonView} lessonRequestLessonView 
     * @param {module:api/LessonControllerApi~saveLessonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LessonLessonView}
     */
    saveLesson(lessonRequestLessonView, callback) {
      let postBody = lessonRequestLessonView;
      // verify the required parameter 'lessonRequestLessonView' is set
      if (lessonRequestLessonView === undefined || lessonRequestLessonView === null) {
        throw new Error("Missing the required parameter 'lessonRequestLessonView' when calling saveLesson");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = LessonLessonView;
      return this.apiClient.callApi(
        '/api/v1/lesson/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
