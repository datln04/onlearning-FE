/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ResourceDTO from '../model/ResourceDTO';
import ResourceRequestResourceView from '../model/ResourceRequestResourceView';
import ResourceResourceView from '../model/ResourceResourceView';

/**
* ResourceController service.
* @module api/ResourceControllerApi
* @version v1
*/
export default class ResourceControllerApi {

    /**
    * Constructs a new ResourceControllerApi. 
    * @alias module:api/ResourceControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getResourceById operation.
     * @callback module:api/ResourceControllerApi~getResourceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceResourceView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/ResourceControllerApi~getResourceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceResourceView}
     */
    getResourceById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResourceById");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ResourceResourceView;
      return this.apiClient.callApi(
        '/api/v1/resource/by-id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceByLesson operation.
     * @callback module:api/ResourceControllerApi~getResourceByLessonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ResourceDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} lessonId 
     * @param {module:api/ResourceControllerApi~getResourceByLessonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ResourceDTO>}
     */
    getResourceByLesson(lessonId, callback) {
      let postBody = null;
      // verify the required parameter 'lessonId' is set
      if (lessonId === undefined || lessonId === null) {
        throw new Error("Missing the required parameter 'lessonId' when calling getResourceByLesson");
      }

      let pathParams = {
      };
      let queryParams = {
        'lesson_id': lessonId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ResourceDTO];
      return this.apiClient.callApi(
        '/api/v1/resource/by-lesson', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResources operation.
     * @callback module:api/ResourceControllerApi~getResourcesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ResourceResourceView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ResourceControllerApi~getResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ResourceResourceView>}
     */
    getResources(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ResourceResourceView];
      return this.apiClient.callApi(
        '/api/v1/resource/resources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveResource operation.
     * @callback module:api/ResourceControllerApi~saveResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceResourceView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ResourceRequestResourceView} resourceRequestResourceView 
     * @param {module:api/ResourceControllerApi~saveResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceResourceView}
     */
    saveResource(resourceRequestResourceView, callback) {
      let postBody = resourceRequestResourceView;
      // verify the required parameter 'resourceRequestResourceView' is set
      if (resourceRequestResourceView === undefined || resourceRequestResourceView === null) {
        throw new Error("Missing the required parameter 'resourceRequestResourceView' when calling saveResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResourceResourceView;
      return this.apiClient.callApi(
        '/api/v1/resource/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
