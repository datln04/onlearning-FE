/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SyllabusRequestSyllabusView from '../model/SyllabusRequestSyllabusView';
import SyllabusSyllabusView from '../model/SyllabusSyllabusView';

/**
* SyllabusController service.
* @module api/SyllabusControllerApi
* @version v1
*/
export default class SyllabusControllerApi {

    /**
    * Constructs a new SyllabusControllerApi. 
    * @alias module:api/SyllabusControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the findSyllabusByCourseEnrolled operation.
     * @callback module:api/SyllabusControllerApi~findSyllabusByCourseEnrolledCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyllabusSyllabusView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} courseId 
     * @param {module:api/SyllabusControllerApi~findSyllabusByCourseEnrolledCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyllabusSyllabusView}
     */
    findSyllabusByCourseEnrolled(courseId, callback) {
      let postBody = null;
      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling findSyllabusByCourseEnrolled");
      }

      let pathParams = {
      };
      let queryParams = {
        'course_id': courseId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SyllabusSyllabusView;
      return this.apiClient.callApi(
        '/api/v1/syllabus/by-course-enroll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findSyllabusByCourseId operation.
     * @callback module:api/SyllabusControllerApi~findSyllabusByCourseIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SyllabusSyllabusView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} courseId 
     * @param {module:api/SyllabusControllerApi~findSyllabusByCourseIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SyllabusSyllabusView>}
     */
    findSyllabusByCourseId(courseId, callback) {
      let postBody = null;
      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling findSyllabusByCourseId");
      }

      let pathParams = {
      };
      let queryParams = {
        'course_id': courseId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SyllabusSyllabusView];
      return this.apiClient.callApi(
        '/api/v1/syllabus/byCourseId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findSyllabusByLessonId operation.
     * @callback module:api/SyllabusControllerApi~findSyllabusByLessonIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SyllabusSyllabusView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} lessonId 
     * @param {module:api/SyllabusControllerApi~findSyllabusByLessonIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SyllabusSyllabusView>}
     */
    findSyllabusByLessonId(lessonId, callback) {
      let postBody = null;
      // verify the required parameter 'lessonId' is set
      if (lessonId === undefined || lessonId === null) {
        throw new Error("Missing the required parameter 'lessonId' when calling findSyllabusByLessonId");
      }

      let pathParams = {
      };
      let queryParams = {
        'lesson_id': lessonId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SyllabusSyllabusView];
      return this.apiClient.callApi(
        '/api/v1/syllabus/byLessonId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllSyllabus operation.
     * @callback module:api/SyllabusControllerApi~getAllSyllabusCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SyllabusSyllabusView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SyllabusControllerApi~getAllSyllabusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SyllabusSyllabusView>}
     */
    getAllSyllabus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SyllabusSyllabusView];
      return this.apiClient.callApi(
        '/api/v1/syllabus/syllabus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSyllabusById operation.
     * @callback module:api/SyllabusControllerApi~getSyllabusByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyllabusSyllabusView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/SyllabusControllerApi~getSyllabusByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyllabusSyllabusView}
     */
    getSyllabusById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSyllabusById");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SyllabusSyllabusView;
      return this.apiClient.callApi(
        '/api/v1/syllabus/byId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveSyllabus operation.
     * @callback module:api/SyllabusControllerApi~saveSyllabusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyllabusSyllabusView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SyllabusRequestSyllabusView} syllabusRequestSyllabusView 
     * @param {module:api/SyllabusControllerApi~saveSyllabusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyllabusSyllabusView}
     */
    saveSyllabus(syllabusRequestSyllabusView, callback) {
      let postBody = syllabusRequestSyllabusView;
      // verify the required parameter 'syllabusRequestSyllabusView' is set
      if (syllabusRequestSyllabusView === undefined || syllabusRequestSyllabusView === null) {
        throw new Error("Missing the required parameter 'syllabusRequestSyllabusView' when calling saveSyllabus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SyllabusSyllabusView;
      return this.apiClient.callApi(
        '/api/v1/syllabus/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
