/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TransactionTransactionView from '../model/TransactionTransactionView';

/**
* TransactionController service.
* @module api/TransactionControllerApi
* @version v1
*/
export default class TransactionControllerApi {

    /**
    * Constructs a new TransactionControllerApi. 
    * @alias module:api/TransactionControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllTransaction operation.
     * @callback module:api/TransactionControllerApi~getAllTransactionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransactionTransactionView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/TransactionControllerApi~getAllTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransactionTransactionView>}
     */
    getAllTransaction(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TransactionTransactionView];
      return this.apiClient.callApi(
        '/api/v1/transaction/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById operation.
     * @callback module:api/TransactionControllerApi~getByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionTransactionView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/TransactionControllerApi~getByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionTransactionView}
     */
    getById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getById");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TransactionTransactionView;
      return this.apiClient.callApi(
        '/api/v1/transaction/by-id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByStudentId operation.
     * @callback module:api/TransactionControllerApi~getByStudentIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransactionTransactionView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.studentId 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/TransactionControllerApi~getByStudentIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransactionTransactionView>}
     */
    getByStudentId(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'studentId': opts['studentId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TransactionTransactionView];
      return this.apiClient.callApi(
        '/api/v1/transaction/by-student', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByTeacherId operation.
     * @callback module:api/TransactionControllerApi~getByTeacherIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransactionTransactionView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.teacherId 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/TransactionControllerApi~getByTeacherIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransactionTransactionView>}
     */
    getByTeacherId(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'teacherId': opts['teacherId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TransactionTransactionView];
      return this.apiClient.callApi(
        '/api/v1/transaction/by-teacher', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionForWithdraw operation.
     * @callback module:api/TransactionControllerApi~getTransactionForWithdrawCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransactionTransactionView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} teacherId 
     * @param {module:api/TransactionControllerApi~getTransactionForWithdrawCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransactionTransactionView>}
     */
    getTransactionForWithdraw(teacherId, callback) {
      let postBody = null;
      // verify the required parameter 'teacherId' is set
      if (teacherId === undefined || teacherId === null) {
        throw new Error("Missing the required parameter 'teacherId' when calling getTransactionForWithdraw");
      }

      let pathParams = {
      };
      let queryParams = {
        'teacher_id': teacherId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TransactionTransactionView];
      return this.apiClient.callApi(
        '/api/v1/transaction/transaction-for-withdraw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveTransaction operation.
     * @callback module:api/TransactionControllerApi~saveTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionTransactionView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TransactionTransactionView} transactionTransactionView 
     * @param {module:api/TransactionControllerApi~saveTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionTransactionView}
     */
    saveTransaction(transactionTransactionView, callback) {
      let postBody = transactionTransactionView;
      // verify the required parameter 'transactionTransactionView' is set
      if (transactionTransactionView === undefined || transactionTransactionView === null) {
        throw new Error("Missing the required parameter 'transactionTransactionView' when calling saveTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TransactionTransactionView;
      return this.apiClient.callApi(
        '/api/v1/transaction/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
