/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Answer from '../model/Answer';

/**
* AnswerController service.
* @module api/AnswerControllerApi
* @version v1
*/
export default class AnswerControllerApi {

    /**
    * Constructs a new AnswerControllerApi. 
    * @alias module:api/AnswerControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the findAllAnswers operation.
     * @callback module:api/AnswerControllerApi~findAllAnswersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Answer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AnswerControllerApi~findAllAnswersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Answer>}
     */
    findAllAnswers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Answer];
      return this.apiClient.callApi(
        '/api/v1/answer/answers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllByQuestion operation.
     * @callback module:api/AnswerControllerApi~findAllByQuestionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Answer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} questionId 
     * @param {module:api/AnswerControllerApi~findAllByQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Answer>}
     */
    findAllByQuestion(questionId, callback) {
      let postBody = null;
      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling findAllByQuestion");
      }

      let pathParams = {
      };
      let queryParams = {
        'question_id': questionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Answer];
      return this.apiClient.callApi(
        '/api/v1/answer/by-question', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById1 operation.
     * @callback module:api/AnswerControllerApi~getById1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Answer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/AnswerControllerApi~getById1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Answer}
     */
    getById1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getById1");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Answer;
      return this.apiClient.callApi(
        '/api/v1/answer/by-id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAnswer operation.
     * @callback module:api/AnswerControllerApi~saveAnswerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Answer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Answer} answer 
     * @param {module:api/AnswerControllerApi~saveAnswerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Answer}
     */
    saveAnswer(answer, callback) {
      let postBody = answer;
      // verify the required parameter 'answer' is set
      if (answer === undefined || answer === null) {
        throw new Error("Missing the required parameter 'answer' when calling saveAnswer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Answer;
      return this.apiClient.callApi(
        '/api/v1/answer/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
