/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DoQuizRequestResultQuizView from '../model/DoQuizRequestResultQuizView';
import QuizRequestViewQuiz from '../model/QuizRequestViewQuiz';
import QuizViewQuiz from '../model/QuizViewQuiz';
import ResponseDTOInteger from '../model/ResponseDTOInteger';
import ResponseDTOQuiz from '../model/ResponseDTOQuiz';
import ResponseDTOResultQuizResultQuizView from '../model/ResponseDTOResultQuizResultQuizView';

/**
* QuizController service.
* @module api/QuizControllerApi
* @version v1
*/
export default class QuizControllerApi {

    /**
    * Constructs a new QuizControllerApi. 
    * @alias module:api/QuizControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the attemptTime operation.
     * @callback module:api/QuizControllerApi~attemptTimeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseDTOInteger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} quizId 
     * @param {Number} studentId 
     * @param {module:api/QuizControllerApi~attemptTimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseDTOInteger}
     */
    attemptTime(quizId, studentId, callback) {
      let postBody = null;
      // verify the required parameter 'quizId' is set
      if (quizId === undefined || quizId === null) {
        throw new Error("Missing the required parameter 'quizId' when calling attemptTime");
      }
      // verify the required parameter 'studentId' is set
      if (studentId === undefined || studentId === null) {
        throw new Error("Missing the required parameter 'studentId' when calling attemptTime");
      }

      let pathParams = {
      };
      let queryParams = {
        'quizId': quizId,
        'studentId': studentId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ResponseDTOInteger;
      return this.apiClient.callApi(
        '/api/v1/quiz/attempt-time', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteQuiz operation.
     * @callback module:api/QuizControllerApi~deleteQuizCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} quizId 
     * @param {module:api/QuizControllerApi~deleteQuizCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteQuiz(quizId, callback) {
      let postBody = null;
      // verify the required parameter 'quizId' is set
      if (quizId === undefined || quizId === null) {
        throw new Error("Missing the required parameter 'quizId' when calling deleteQuiz");
      }

      let pathParams = {
      };
      let queryParams = {
        'quizId': quizId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/quiz/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableQuiz operation.
     * @callback module:api/QuizControllerApi~disableQuizCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseDTOQuiz} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} quizId 
     * @param {module:api/QuizControllerApi~disableQuizCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseDTOQuiz}
     */
    disableQuiz(quizId, callback) {
      let postBody = null;
      // verify the required parameter 'quizId' is set
      if (quizId === undefined || quizId === null) {
        throw new Error("Missing the required parameter 'quizId' when calling disableQuiz");
      }

      let pathParams = {
      };
      let queryParams = {
        'quizId': quizId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ResponseDTOQuiz;
      return this.apiClient.callApi(
        '/api/v1/quiz/disable', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doQuiz operation.
     * @callback module:api/QuizControllerApi~doQuizCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseDTOResultQuizResultQuizView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DoQuizRequestResultQuizView} doQuizRequestResultQuizView 
     * @param {module:api/QuizControllerApi~doQuizCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseDTOResultQuizResultQuizView}
     */
    doQuiz(doQuizRequestResultQuizView, callback) {
      let postBody = doQuizRequestResultQuizView;
      // verify the required parameter 'doQuizRequestResultQuizView' is set
      if (doQuizRequestResultQuizView === undefined || doQuizRequestResultQuizView === null) {
        throw new Error("Missing the required parameter 'doQuizRequestResultQuizView' when calling doQuiz");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResponseDTOResultQuizResultQuizView;
      return this.apiClient.callApi(
        '/api/v1/quiz/do-quiz', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableQuiz operation.
     * @callback module:api/QuizControllerApi~enableQuizCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseDTOQuiz} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} quizId 
     * @param {module:api/QuizControllerApi~enableQuizCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseDTOQuiz}
     */
    enableQuiz(quizId, callback) {
      let postBody = null;
      // verify the required parameter 'quizId' is set
      if (quizId === undefined || quizId === null) {
        throw new Error("Missing the required parameter 'quizId' when calling enableQuiz");
      }

      let pathParams = {
      };
      let queryParams = {
        'quizId': quizId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ResponseDTOQuiz;
      return this.apiClient.callApi(
        '/api/v1/quiz/enable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllQuizByLessonId operation.
     * @callback module:api/QuizControllerApi~findAllQuizByLessonIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuizViewQuiz>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} lessonId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.status  (default to '')
     * @param {module:api/QuizControllerApi~findAllQuizByLessonIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuizViewQuiz>}
     */
    findAllQuizByLessonId(lessonId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lessonId' is set
      if (lessonId === undefined || lessonId === null) {
        throw new Error("Missing the required parameter 'lessonId' when calling findAllQuizByLessonId");
      }

      let pathParams = {
      };
      let queryParams = {
        'lesson_id': lessonId,
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuizViewQuiz];
      return this.apiClient.callApi(
        '/api/v1/quiz/byLesson', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllQuizes operation.
     * @callback module:api/QuizControllerApi~findAllQuizesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuizViewQuiz>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/QuizControllerApi~findAllQuizesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuizViewQuiz>}
     */
    findAllQuizes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuizViewQuiz];
      return this.apiClient.callApi(
        '/api/v1/quiz/quizzes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findQuizById operation.
     * @callback module:api/QuizControllerApi~findQuizByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuizViewQuiz} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} quizId 
     * @param {module:api/QuizControllerApi~findQuizByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuizViewQuiz}
     */
    findQuizById(quizId, callback) {
      let postBody = null;
      // verify the required parameter 'quizId' is set
      if (quizId === undefined || quizId === null) {
        throw new Error("Missing the required parameter 'quizId' when calling findQuizById");
      }

      let pathParams = {
      };
      let queryParams = {
        'quiz_id': quizId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = QuizViewQuiz;
      return this.apiClient.callApi(
        '/api/v1/quiz/byId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveQuiz operation.
     * @callback module:api/QuizControllerApi~saveQuizCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuizViewQuiz} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/QuizRequestViewQuiz} quizRequestViewQuiz 
     * @param {module:api/QuizControllerApi~saveQuizCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuizViewQuiz}
     */
    saveQuiz(quizRequestViewQuiz, callback) {
      let postBody = quizRequestViewQuiz;
      // verify the required parameter 'quizRequestViewQuiz' is set
      if (quizRequestViewQuiz === undefined || quizRequestViewQuiz === null) {
        throw new Error("Missing the required parameter 'quizRequestViewQuiz' when calling saveQuiz");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = QuizViewQuiz;
      return this.apiClient.callApi(
        '/api/v1/quiz/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
